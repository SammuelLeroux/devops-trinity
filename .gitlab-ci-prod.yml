build_frontend_prod:
  stage: build
  image: docker:latest
  script:
    - echo "Copier docker dans le dir"
    - cd frontend
    - echo "Building Docker image for frontend in production..."
    - docker build -f Dockerfile.prod -t frontend:prod .
    - echo "Fontend build successful."
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always

build_backend-api_prod:
  stage: build
  image: docker:latest
  variables:
    NODE_ENV: "production"
  script:
    - echo "Copier docker dans le dir"
    - cd backend/trinity-api
    - echo "Building Docker image for backend in production..."
    - docker build -f Dockerfile.prod -t backend:prod .
    - echo "Backend build successful."
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always

build_backend-dashboard_prod:
  stage: build
  image: docker:latest
  variables:
    NODE_ENV: "production"
  script:
    - echo "Copier docker dans le dir"
    - cd backend/trinity-dashboard
    - echo "Building Docker image for dashboard in production..."
    - docker build -f Dockerfile.prod -t dashboard:prod .
    - echo "Backend dashboard build successful."
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always

test_frontend_prod:
  stage: test
  image: docker:latest
  script:
    - cd frontend
    - echo "Installing dependencies..."
    - docker run --rm frontend:prod npm install
    - echo "Building Docker image for frontend in production..."
    - docker build -f Dockerfile.prod -t frontend:prod .
    - echo "Running lint checks on the frontend code..."
    - docker run --rm frontend:prod npm run lint
    - echo "Running tests on the frontend image..."
    - |
      if docker run --rm frontend:prod npm run test:coverage; then
        echo "Tests passed or no tests present."
      else
        echo "Tests failed or not configured, but ignoring the failure."
        exit 0  # Ignore test failures if not critical
      fi
  artifacts:
    when: always
    reports:
      junit: frontend/reports/junit/js-test-results.xml
    paths:
      - frontend/reports/junit/
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
    - build_frontend_prod
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always


test_backend-dashboard_prod:
  stage: test
  image: docker:latest
  script:
    - cd backend/trinity-dashboard
    - echo "Building Docker image for dashboard..."
    - docker build -f Dockerfile.prod -t dashboard:prod .
    - echo "Running lint checks on the dashboard code..."
    - docker run --rm dashboard:prod npm run lint
    - echo "Running tests on the dashboard image..."
    - |
      if grep -q '"test":' package.json; then
        echo "Running tests on the backend image..."
        docker run --rm dashboard:prod npm run test || true
      else
        echo "No tests found, skipping test execution."
      fi
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
    - build_backend-api_prod
    - build_backend-dashboard_prod
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always


#deploy_front_to_dockerhub:
 # stage: deploy
  #image: docker:latest
  #script:
  #  - echo "Pushing Docker images to Docker Hub..."
  #  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  #  - docker tag frontend-prod $DOCKER_FRONTEND_IMAGE
  #  - docker push $DOCKER_FRONTEND_IMAGE
  #dependencies:
   # - clone_and_prepare_docker
  #  - clone_and_prepare_repositories
  #  - test_frontend_prod
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "trigger"'
  #    when: always

deploy_back_on_vercel:
  stage: deploy
  script:
    - echo "Deploying backend to Vercel..."
    - cd backend || exit 1
    - npm install -g vercel || exit 1
    - vercel --token $VERCEL_TOKEN --yes || { echo "Vercel deployment failed"; exit 1; }
    - ./deploy.sh || { echo "Post-deployment script failed"; exit 1; }
  dependencies:
    - clone_and_prepare_repositories
    - test_backend-dashboard_prod
  cache:
    key: npm-global-cache
    paths:
      - ~/.npm
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always

deploy_to_expo:
  stage: deploy
  image: node:20
  script:
    - echo "Installing Expo CLI..."
    - npm install -g eas-cli

    - echo "Validating EAS CLI version..."
    - eas --version

    - cd frontend || exit 1

    - echo "Clearing npm cache to prevent conflicts..."
    - npm cache clean --force
    - rm -rf .expo
    - rm -rf node_modules
    - npm install

    - echo "Verifying Expo configuration..."
    - npx expo config --json --type public || { echo "Expo config check failed"; exit 1; }

    - echo "Validating 'expo-router' resolution..."
    - npm ls expo-router || { echo "'expo-router' is missing or unresolved"; exit 1; }
    
    - echo "Publishing the app to Expo..."
    - export NODE_OPTIONS="--max-old-space-size=4096"
    - eas update --auto --non-interactive --platform ios || { echo "EAS Update ios failed"; exit 1; }
    - eas update --auto --non-interactive --platform android || { echo "EAS Update android failed"; exit 1; }
  dependencies:
    - clone_and_prepare_repositories
    - test_backend-dashboard_prod
  cache:
    key: npm-global-cache
    paths:
      - ~/.npm
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always