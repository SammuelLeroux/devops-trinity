build_frontend_dev:
  stage: build
  image: docker:latest
  script:
    - echo "Using docker for the frontend..."
    - cd frontend
    - echo "Building Docker image for frontend in development..."
    - docker build -f Dockerfile.dev -t frontend:dev .
    - echo "Frontend build successful."
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always

build_backend-api_dev:
  stage: build
  image: docker:latest
  variables:
    NODE_ENV: "development"
  script:
    - echo "Using docker for the backend..."
    - cd backend/trinity-api
    - echo "Building Docker image for backend in development..."
    - docker build -f Dockerfile.dev -t backend:dev .
    - echo "Backend build successful."
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always

build_backend-dashboard_dev:
  stage: build
  image: docker:latest
  variables:
    NODE_ENV: "development"
  script:
    - echo "Using docker for the backend..."
    - cd backend/trinity-dashboard
    - echo "Building Docker image for backend in development..."
    - docker build -f Dockerfile.dev -t dashboard:dev .
    - echo "Backend build successful."
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always


test_frontend_dev:
  stage: test
  image: docker:latest
  variables:
  script:
    - cd frontend
    - echo "Installing dependencies..."
    - docker run --rm frontend:dev npm install
    - echo "Building Docker image for frontend in development..."
    - docker build -f Dockerfile.dev -t frontend:dev .
    - echo "Running lint checks on the frontend code..."
    - docker run --rm frontend:dev npm run lint
    - echo "Running tests on the frontend image..."
    - |
      if docker run --rm frontend:dev npm run test:coverage; then
        echo "Tests passed or no tests present."
      else
        echo "Tests failed or not configured, but ignoring the failure."
        exit 0  # Ignore test failures if not critical
      fi
  artifacts:
    when: always
    reports:
      junit: frontend/reports/junit/js-test-results.xml
    paths:
      - frontend/reports/junit/
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
    - build_frontend_dev
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always


test_backend-dashboard_dev:
  stage: test
  image: docker:latest
  script:
    - cd backend/trinity-dashboard
    - echo "Building Docker image for dashboard..."
    - docker build -f Dockerfile.dev -t dashboard:dev .
    - echo "Running lint checks on the dashboard code..."
    - docker run --rm dashboard:dev npm run lint
    - echo "Running tests on the dashboard image..."
    - |
      if grep -q '"test":' package.json; then
        echo "Running tests on the backend image..."
        docker run --rm dashboard:dev npm run test || true
      else
        echo "No tests found, skipping test execution."
      fi
  dependencies:
    - clone_and_prepare_docker
    - clone_and_prepare_repositories
    - build_backend-api_dev
    - build_backend-dashboard_dev
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always